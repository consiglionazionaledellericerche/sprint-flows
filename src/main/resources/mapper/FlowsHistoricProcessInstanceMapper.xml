<?xml version="1.0" encoding="UTF-8" ?>

<!-- ~ Licensed under the Apache License, Version 2.0 (the "License"); ~
    you may not use this file except in compliance with the License. ~ You may
    obtain a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0
    ~ ~ Unless required by applicable law or agreed to in writing, software ~
    distributed under the License is distributed on an "AS IS" BASIS, ~ WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ~ See the
    License for the specific language governing permissions and ~ limitations
    under the License. -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
    namespace="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">

    <select id="selectFlowsHistoricProcessInstanceCountByQueryCriteria"
        parameterType="org.activiti.engine.impl.HistoricProcessInstanceQueryImpl"
        resultType="long">
        select count(distinct RES.ID_)
        <include
            refid="selectFlowsHistoricProcessInstancesWithVariablesByQueryCriteriaSql" />
    </select>

    <select
        id="selectFlowsHistoricProcessInstancesWithVariablesByQueryCriteria"
        parameterType="it.cnr.si.flows.ng.repository.FlowsHistoricProcessInstanceQuery"
        resultMap="historicProcessInstanceAndVariablesResultMap">
        ${limitBefore}
        select distinct RES.*,
        DEF.KEY_ as PROC_DEF_KEY_,
        DEF.NAME_ as PROC_DEF_NAME_,
        DEF.VERSION_ as PROC_DEF_VERSION_,
        DEF.DEPLOYMENT_ID_ as DEPLOYMENT_ID_,
        VAR.ID_ as VAR_ID_,
        VAR.NAME_ as VAR_NAME_,
        VAR.VAR_TYPE_ as VAR_TYPE_,
        VAR.REV_ as VAR_REV_,
        VAR.PROC_INST_ID_ as VAR_PROC_INST_ID_,
        VAR.EXECUTION_ID_ as VAR_EXECUTION_ID_,
        VAR.TASK_ID_ as VAR_TASK_ID_,
        VAR.BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_,
        VAR.DOUBLE_ as VAR_DOUBLE_,
        VAR.TEXT_ as VAR_TEXT_,
        VAR.TEXT2_ as VAR_TEXT2_,
        VAR.LAST_UPDATED_TIME_ as VAR_LAST_UPDATED_TIME_,
        VAR.LONG_ as VAR_LONG_
        ${limitBetween}
        <include
            refid="selectFlowsHistoricProcessInstancesWithVariablesByQueryCriteriaSql" />
        ${orderBy}
        ${limitAfter}
    </select>

    <sql
        id="selectFlowsHistoricProcessInstancesWithVariablesByQueryCriteriaSql">
        from ${prefix}ACT_HI_PROCINST RES
        left outer join ${prefix}ACT_RE_PROCDEF DEF on RES.PROC_DEF_ID_ = DEF.ID_
        left outer join ${prefix}ACT_HI_VARINST VAR ON RES.PROC_INST_ID_
        = VAR.EXECUTION_ID_ and VAR.TASK_ID_ is null
        <include
            refid="commonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql" />
    </sql>

    <sql id="commonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql">


        <!--&lt;!&ndash; Custom per visibilita' &ndash;&gt;-->
        <!--left outer join ${prefix}ACT_HI_IDENTITYLINK I on-->
        <!--I.PROC_INST_ID_ = RES.ID_-->
        <!--&lt;!&ndash; fine custom &ndash;&gt;-->

        <foreach collection="queryVariableValues" index="index"
            item="queryVariableValue">
            <if test="queryVariableValue.name.equals('oggetto')">
                inner join ${prefix}ACT_HI_VARINST A${index} on RES.PROC_INST_ID_ =
                A${index}.PROC_INST_ID_
            </if>
        </foreach>
        <foreach collection="orQueryObjects" index="orIndex"
            item="orQueryObject">
            <if
                test="orQueryObject.processKeyNotIn != null || orQueryObject.processDefinitionKey != null || orQueryObject.processDefinitionCategory != null || orQueryObject.processDefinitionName != null || orQueryObject.processDefinitionVersion != null || (orQueryObject.processDefinitionKeyIn != null &amp;&amp; orQueryObject.processDefinitionKeyIn.size() &gt; 0)">
                inner join ${prefix}ACT_RE_PROCDEF DEF_OR${orIndex} on RES.PROC_DEF_ID_ =
                DEF_OR${orIndex}.ID_
            </if>
            <if
                test="orQueryObject.deploymentId != null || (orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0)">
                left outer join ${prefix}ACT_RE_PROCDEF DEPLOY_P_OR${orIndex} ON
                RES.PROC_DEF_ID_ = DEPLOY_P_OR${orIndex}.ID_
            </if>
            <if
                test="orQueryObject.queryVariableValues != null &amp;&amp; orQueryObject.queryVariableValues.size() &gt; 0">
                left outer join ${prefix}ACT_HI_VARINST A_OR${orIndex} on
                RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_
            </if>
        </foreach>
        <if
            test="deploymentId != null || (deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0)">
            left outer join ${prefix}ACT_RE_PROCDEF DEPLOY_P ON RES.PROC_DEF_ID_ =
            DEPLOY_P.ID_
        </if>
        <if test="withJobException">
            left outer join ${prefix}ACT_RU_JOB JOB ON RES.PROC_INST_ID_ =
            JOB.PROCESS_INSTANCE_ID_
        </if>
        <where>
            <if test="processInstanceId != null">
                RES.PROC_INST_ID_ = #{processInstanceId}
            </if>
            <if
                test="processInstanceIds != null and !processInstanceIds.isEmpty()">
                and RES.PROC_INST_ID_ in
                <foreach item="item" index="index" collection="processInstanceIds"
                    open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="processDefinitionId != null">
                and RES.PROC_DEF_ID_ = #{processDefinitionId}
            </if>
            <if test="processDefinitionKey != null">
                and DEF.KEY_ = #{processDefinitionKey}
            </if>
            <if
                test="processDefinitionKeyIn != null &amp;&amp; processDefinitionKeyIn.size() &gt; 0">
                and DEF.KEY_ IN
                <foreach item="definition" index="index"
                    collection="processDefinitionKeyIn" open="("
                    separator="," close=")">
                    #{definition}
                </foreach>
            </if>
            <if test="processDefinitionVersion != null">
                and DEF.VERSION_ = #{processDefinitionVersion}
            </if>
            <if test="processDefinitionCategory != null">
                and DEF.CATEGORY_ = #{processDefinitionCategory}
            </if>
            <if test="processDefinitionName != null">
                and DEF.NAME_ = #{processDefinitionName}
            </if>
            <if test="businessKey != null">
                and RES.BUSINESS_KEY_ = #{businessKey}
            </if>
            <if test="deploymentId != null">
                and DEPLOY_P.DEPLOYMENT_ID_ = #{deploymentId}
            </if>
            <if
                test="deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0">
                and DEPLOY_P.DEPLOYMENT_ID_ IN
                <foreach item="deployment" index="index"
                    collection="deploymentIds" open="(" separator=","
                    close=")">
                    #{deployment}
                </foreach>
            </if>
            <if test="startedBefore != null">
                and RES.START_TIME_ &lt;= #{startedBefore}
            </if>
            <if test="startedAfter != null">
                and RES.START_TIME_ &gt;= #{startedAfter}
            </if>
            <if test="finishedBefore != null">
                and RES.END_TIME_ &lt;= #{finishedBefore}
            </if>
            <if test="finishedAfter != null">
                and RES.END_TIME_ &gt;= #{finishedAfter}
            </if>
            <if test="processKeyNotIn != null">
                <foreach collection="processKeyNotIn" index="index"
                    item="procDefKey">
                    and DEF.KEY_ not like #{procDefKey}${wildcardEscapeClause}
                </foreach>
            </if>
            <if test="unfinished">
                and RES.END_TIME_ IS NULL
            </if>
            <if test="finished">
                and RES.END_TIME_ is not NULL
            </if>
            <if test="notDeleted">
                and RES.DELETE_REASON_ IS NULL
            </if>
            <if test="deleted">
                and RES.DELETE_REASON_ IS NOT NULL
            </if>
            <if test="involvedUser != null">
                and (
                exists(select LINK.USER_ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where USER_ID_
                = #{involvedUser} and LINK.PROC_INST_ID_ = RES.ID_)
                )
            </if>

            <!-- Custom query per visibilita' -->
            <!-- aggiungere il tipo di link and I.TYPE_ = 'visualizzatore' -->
            <!--<if test="visibleToGroups != null || visibleToUser != null">-->
            <!--and I.TYPE_ = 'visualizzatore'-->
            <!--and-->
            <!--( I.GROUP_ID_ IN (-->
            <!--<foreach item="group" index="index" collection="visibleToGroups"-->
            <!--open="" separator="," close="">-->
            <!--#{group}-->
            <!--</foreach>-->
            <!--)-->
            <!--OR I.USER_ID_ =  #{visibleToUser}-->
            <!--)-->
            <!--</if>-->


            <if test="startedBy != null">
                and RES.START_USER_ID_ = #{startedBy}
            </if>
            <if test="superProcessInstanceId != null">
                and RES.SUPER_PROCESS_INSTANCE_ID_ = #{superProcessInstanceId}
            </if>
            <if test="excludeSubprocesses">
                and RES.SUPER_PROCESS_INSTANCE_ID_ is null
            </if>
            <if test="tenantId != null">
                and RES.TENANT_ID_ = #{tenantId}
            </if>
            <if test="tenantIdLike != null">
                and RES.TENANT_ID_ like #{tenantIdLike}${wildcardEscapeClause}
            </if>
            <if test="withoutTenantId">
                and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
            </if>
            <if test="name != null">
                and RES.NAME_ = #{name}
            </if>
            <if test="nameLike != null">
                and RES.NAME_ like #{nameLike}${wildcardEscapeClause}
            </if>
            <if test="nameLikeIgnoreCase != null">
                and lower(RES.NAME_) like #{nameLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <foreach collection="queryVariableValues" index="index"
                item="queryVariableValue">
                <if test="queryVariableValue.name.equals('oggetto')">
                    <if test="queryVariableValue.name != null">
                        <!-- Match-all variable-names when name is null todo:MODIFICARE QUI?-->
                        and A${index}.NAME_= #{queryVariableValue.name}
                    </if>
                    <if test="!queryVariableValue.type.equals('null')">
                        <!-- When operator is not-equals or type of value is
                            null, type doesn't matter! -->
                        and A${index}.VAR_TYPE_ = #{queryVariableValue.type}
                    </if>
                    <if
                            test="queryVariableValue.textValue != null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
                        <choose>
                            <when
                                    test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE') || queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE') || queryVariableValue.operator.equals('LIKE_IGNORE_CASE')">
                                and lower(A${index}.TEXT_)
                            </when>
                            <otherwise>
                                and A${index}.TEXT_
                            </otherwise>
                        </choose>
                        <choose>
                            <when
                                    test="queryVariableValue.operator.equals('LIKE') || queryVariableValue.operator.equals('LIKE_IGNORE_CASE')">
                                LIKE
                            </when>
                            <otherwise>
                                <include
                                        refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql"/>
                            </otherwise>
                        </choose>
                        #{queryVariableValue.textValue}
                        <choose>
                            <when
                                    test="queryVariableValue.operator.equals('LIKE') || queryVariableValue.operator.equals('LIKE_IGNORE_CASE')">
                                ${wildcardEscapeClause}
                            </when>
                        </choose>
                    </if>
                    <if test="queryVariableValue.textValue2 != null">
                        and A${index}.TEXT2_
                        <choose>
                            <when
                                    test="queryVariableValue.operator.equals('LIKE')">LIKE
                            </when>
                            <otherwise>
                                <include
                                        refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql"/>
                            </otherwise>
                        </choose>
                        #{queryVariableValue.textValue2}
                        <choose>
                            <when
                                    test="queryVariableValue.operator.equals('LIKE')">${wildcardEscapeClause}
                            </when>
                        </choose>
                    </if>
                    <if test="queryVariableValue.longValue != null">
                        and A${index}.LONG_
                        <include
                                refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql"/>
                        #{queryVariableValue.longValue}
                    </if>
                    <if test="queryVariableValue.doubleValue != null">
                        and A${index}.DOUBLE_
                        <include
                                refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql"/>
                        #{queryVariableValue.doubleValue}
                    </if>
                    <!-- Null variable type -->
                    <if
                            test="queryVariableValue.textValue == null &amp;&amp; queryVariableValue.textValue2 == null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
                        <choose>
                            <when
                                    test="queryVariableValue.operator.equals('NOT_EQUALS')">
                                and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or
                                A${index}.LONG_ is not null or
                                A${index}.DOUBLE_ is not null or
                                A${index}.BYTEARRAY_ID_ is not null)
                            </when>
                            <otherwise>
                                and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and
                                A${index}.LONG_ is null and
                                A${index}.DOUBLE_ is null and
                                A${index}.BYTEARRAY_ID_ is null
                            </otherwise>
                        </choose>
                    </if>
                </if>
            </foreach>
            <foreach item="orQueryObject" index="orIndex"
                collection="orQueryObjects">
                and
                <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <if test="orQueryObject.processInstanceId != null">
                        RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}
                    </if>
                    <if
                        test="orQueryObject.processInstanceIds != null and !orQueryObject.processInstanceIds.isEmpty()">
                        or RES.PROC_INST_ID_ in
                        <foreach item="item" index="index"
                            collection="orQueryObject.processInstanceIds"
                            open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </if>
                    <if test="orQueryObject.processDefinitionId != null">
                        or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}
                    </if>
                    <if test="orQueryObject.processDefinitionKey != null">
                        or DEF_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}
                    </if>
                    <if
                        test="orQueryObject.processDefinitionKeyIn != null &amp;&amp; orQueryObject.processDefinitionKeyIn.size() &gt; 0">
                        or DEF_OR${orIndex}.KEY_ IN
                        <foreach item="definition" index="index"
                            collection="orQueryObject.processDefinitionKeyIn"
                            open="(" separator="," close=")">
                            #{definition}
                        </foreach>
                    </if>
                    <if test="orQueryObject.processDefinitionVersion != null">
                        or DEF_OR${orIndex}.VERSION_ =
                        #{orQueryObject.processDefinitionVersion}
                    </if>
                    <if
                        test="orQueryObject.processDefinitionCategory != null">
                        or DEF_OR${orIndex}.CATEGORY_ =
                        #{orQueryObject.processDefinitionCategory}
                    </if>
                    <if test="orQueryObject.processDefinitionName != null">
                        or DEF_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}
                    </if>
                    <if test="orQueryObject.businessKey != null">
                        or RES.BUSINESS_KEY_ = #{orQueryObject.businessKey}
                    </if>
                    <if test="orQueryObject.deploymentId != null">
                        or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ =
                        #{orQueryObject.deploymentId}
                    </if>
                    <if
                        test="orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0">
                        or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN
                        <foreach item="deployment" index="index"
                            collection="orQueryObject.deploymentIds"
                            open="(" separator="," close=")">
                            #{deployment}
                        </foreach>
                    </if>
                    <if test="orQueryObject.startedBefore != null">
                        or RES.START_TIME_ &lt;= #{orQueryObject.startedBefore}
                    </if>
                    <if test="orQueryObject.startedAfter != null">
                        or RES.START_TIME_ &gt;= #{orQueryObject.startedAfter}
                    </if>
                    <if test="orQueryObject.finishedBefore != null">
                        or (RES.END_TIME_ is not NULL and RES.END_TIME_ &lt;=
                        #{orQueryObject.finishedBefore})
                    </if>
                    <if test="orQueryObject.finishedAfter != null">
                        or (RES.END_TIME_ is not NULL and RES.END_TIME_ &gt;=
                        #{orQueryObject.finishedAfter})
                    </if>
                    <if test="orQueryObject.processKeyNotIn != null">
                        or
                        <trim prefix="(" prefixOverrides="AND"
                            suffix=")">
                            <foreach collection="orQueryObject.processKeyNotIn"
                                index="index" item="procDefKey">
                                and DEF_OR${orIndex}.KEY_ not like
                                #{procDefKey}${wildcardEscapeClause}
                            </foreach>
                        </trim>
                    </if>
                    <if test="orQueryObject.unfinished">
                        or RES.END_TIME_ IS NULL
                    </if>
                    <if test="orQueryObject.finished">
                        or RES.END_TIME_ is not NULL
                    </if>
                    <if test="orQueryObject.notDeleted">
                        or RES.DELETE_REASON_ IS NULL
                    </if>
                    <if test="orQueryObject.deleted">
                        or RES.DELETE_REASON_ IS NOT NULL
                    </if>
                    <if test="orQueryObject.involvedUser != null">
                        or (
                        exists(select LINK.USER_ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where
                        USER_ID_ = #{orQueryObject.involvedUser} and
                        LINK.PROC_INST_ID_ = RES.ID_)
                        )
                    </if>
                    <if test="orQueryObject.startedBy != null">
                        or RES.START_USER_ID_ = #{orQueryObject.startedBy}
                    </if>
                    <if test="orQueryObject.superProcessInstanceId != null">
                        or RES.SUPER_PROCESS_INSTANCE_ID_ =
                        #{orQueryObject.superProcessInstanceId}
                    </if>
                    <if test="orQueryObject.excludeSubprocesses">
                        or RES.SUPER_PROCESS_INSTANCE_ID_ is null
                    </if>
                    <if test="orQueryObject.tenantId != null">
                        or RES.TENANT_ID_ = #{orQueryObject.tenantId}
                    </if>
                    <if test="orQueryObject.tenantIdLike != null">
                        or RES.TENANT_ID_ like
                        #{orQueryObject.tenantIdLike}${wildcardEscapeClause}
                    </if>
                    <if test="orQueryObject.withoutTenantId">
                        or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
                    </if>
                    <if test="orQueryObject.name != null">
                        or RES.NAME_ = #{orQueryObject.name}
                    </if>
                    <if test="orQueryObject.nameLike != null">
                        or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}
                    </if>
                    <if test="orQueryObject.nameLikeIgnoreCase != null">
                        or lower(RES.NAME_) like
                        #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}
                    </if>
                    <foreach collection="orQueryObject.queryVariableValues"
                        index="index" item="queryVariableValue">
                        or
                        <trim prefix="(" prefixOverrides="AND"
                            suffix=")">
                            <if test="queryVariableValue.name != null">
                                <!-- Match-all variable-names when name is
                                    null -->
                                and A_OR${orIndex}.NAME_=
                                #{queryVariableValue.name}
                            </if>
                            <if
                                test="!queryVariableValue.type.equals('null')">
                                <!-- When operator is not-equals or type
                                    of value is null, type doesn't matter! -->
                                and A_OR${orIndex}.VAR_TYPE_ =
                                #{queryVariableValue.type}
                            </if>
                            <if
                                test="queryVariableValue.textValue != null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
                                <choose>
                                    <when
                                        test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE') || queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE') || queryVariableValue.operator.equals('LIKE_IGNORE_CASE')">
                                        and lower(A_OR${orIndex}.TEXT_)
                                    </when>
                                    <otherwise>
                                        and A_OR${orIndex}.TEXT_
                                    </otherwise>
                                </choose>
                                <choose>
                                    <when
                                        test="queryVariableValue.operator.equals('LIKE') || queryVariableValue.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                                    <otherwise>
                                        <include
                                            refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql" />
                                    </otherwise>
                                </choose>
                                #{queryVariableValue.textValue}
                                <choose>
                                    <when
                                        test="queryVariableValue.operator.equals('LIKE') || queryVariableValue.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}
                                    </when>
                                </choose>
                            </if>
                            <if test="queryVariableValue.textValue2 != null">
                                and A_OR${orIndex}.TEXT2_
                                <choose>
                                    <when
                                        test="queryVariableValue.operator.equals('LIKE')">LIKE</when>
                                    <otherwise>
                                        <include
                                            refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql" />
                                    </otherwise>
                                </choose>
                                #{queryVariableValue.textValue2}
                                <choose>
                                    <when
                                        test="queryVariableValue.operator.equals('LIKE')">${wildcardEscapeClause}
                                    </when>
                                </choose>
                            </if>
                            <if test="queryVariableValue.longValue != null">
                                and A_OR${orIndex}.LONG_
                                <include
                                    refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql" />
                                #{queryVariableValue.longValue}
                            </if>
                            <if test="queryVariableValue.doubleValue != null">
                                and A_OR${orIndex}.DOUBLE_
                                <include
                                    refid="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql" />
                                #{queryVariableValue.doubleValue}
                            </if>
                            <!-- Null variable type -->
                            <if
                                test="queryVariableValue.textValue == null &amp;&amp; queryVariableValue.textValue2 == null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
                                <choose>
                                    <when
                                        test="queryVariableValue.operator.equals('NOT_EQUALS')">
                                        and (A_OR${orIndex}.TEXT_ is not null or A_OR${orIndex}.TEXT2_ is
                                        not null or A_OR${orIndex}.LONG_
                                        is not null or
                                        A_OR${orIndex}.DOUBLE_ is not
                                        null or
                                        A_OR${orIndex}.BYTEARRAY_ID_ is
                                        not null)
                                    </when>
                                    <otherwise>
                                        and A_OR${orIndex}.TEXT_ is null and A_OR${orIndex}.TEXT2_ is
                                        null and A_OR${orIndex}.LONG_ is
                                        null and A_OR${orIndex}.DOUBLE_
                                        is null and
                                        A_OR${orIndex}.BYTEARRAY_ID_ is
                                        null
                                    </otherwise>
                                </choose>
                            </if>
                        </trim>
                    </foreach>
                </trim>
            </foreach>
            <if test="withJobException">
                and (JOB.EXCEPTION_MSG_ is not null or JOB.EXCEPTION_STACK_ID_ is not
                null)
            </if>
        </where>
    </sql>

    <sql
        id="flowsExecutionVariableOperatorcommonFlowsSelectHistoricProcessInstancesByQueryCriteriaSql">
        <choose>
            <when test="queryVariableValue.operator.equals('EQUALS')">=</when>
            <when
                test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE')">=</when>
            <when test="queryVariableValue.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
            <when
                test="queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
            <when test="queryVariableValue.operator.equals('GREATER_THAN')">&gt;</when>
            <when
                test="queryVariableValue.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
            <when test="queryVariableValue.operator.equals('LESS_THAN')">&lt;</when>
            <when
                test="queryVariableValue.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
        </choose>
    </sql>

</mapper>